df<-read.csv("activity.csv")
df
str(df)
df<-read.csv("activity.csv",na.strings = "NA")
str(df)
date
date()
?read.csv
df<-read.csv("activity.csv",na.strings = "NA", sep=',')
str(df)
df
df$date
type(df$date)
class(df$date)
df$date<-as.Date(df$date)
df
str(df)
df$date<-as.Date(df$date)
summary(df)
View(df)
aggregate(df$steps, by=list(df$date), FUN=sum)
[aggregate(df$steps, by=list(df$date), FUN=sum)[2]
[aggregate(df$steps, by=list(df$date), FUN=sum)[2,]
[aggregate(df$steps, by=list(df$date), FUN=sum)[,1]
[aggregate(df$steps, by=list(df$date), FUN=sum)[,2]
aggregate(df$steps, by=list(df$date), FUN=sum)[,2]
byday<-aggregate(df$steps, by=list(df$date), FUN=sum)[,2]
17568/288
mean(byday$steps)
mean(byday[,2])
byday[,2]
byday
stepsbyday <- aggregate(df$steps, by=list(df$date), FUN=sum)[,2]
mean(stepsbyday)
?mean
mean(stepsbyday,na.rm = T)
View(stepsbyday)
plot(df$steps~date)
plot(df$steps~df$date)
plot(stepsbyday$steps~stepsbyday$date)
plot(stepsbyday$steps~stepsbyday$date)
stepsbyday
stepsbyday <- aggregate(df$steps, by=list(df$date), FUN=sum)
mean(stepsbyday[,2])
mean(stepsbyday[,2],na.rm = T)
plot(stepsbyday$steps~stepsbyday$date)
View(stepsbyday)
colnames(stepsbyday)<-c("date","steps")
plot(stepsbyday$steps~stepsbyday$date)
stepsbyday$steps[is.na(stepsbyday$steps)] = mean(stepsbyday$steps, na.rm=TRUE)
View(stepsbyday)
plot(stepsbyday$steps~stepsbyday$date)
plot(stepsbyday$steps~stepsbyday$date)
imputed_data<-stepsbyday
imputed_data$steps[is.na(imputed_data$steps)] = mean(imputed_data$steps, na.rm=TRUE)
View(imputed_data)
stepsbyday <- aggregate(df$steps, by=list(df$date), FUN=sum)
mean(stepsbyday[,2])
colnames(stepsbyday)<-c("date","steps")
plot(stepsbyday$steps~stepsbyday$date)
imputed_data<-stepsbyday
imputed_data$steps[is.na(imputed_data$steps)] = mean(imputed_data$steps, na.rm=TRUE)
View(stepsbyday)
View(imputed_data)
imputed_data<-stepsbyday
imputed_data$steps[is.na(imputed_data$steps)] = mean(imputed_data$steps, na.rm=TRUE)
View(stepsbyday)
install.packages("amlia")
install.packages("amlie")
install.packages("mice")
?mice
mice::complete
?mice::complete
?mice::complete(stepsbyday)
complete(mice(stepsbyday))
mice::complete(mice(stepsbyday))
require(mice)
complete(mice(stepsbyday))
mice(stepsbyday,m=2)
x<-mice(stepsbyday,m=2)
x<-mice(stepsbyday$steps,m=2)
stepsbyday
as.Numberic(stepsbyday$steps)
as.numeric(stepsbyday$steps)
stepsbyday$steps<-as.numeric(stepsbyday$steps)
stepsbyday
summary(stepsbyday)
str(stepsbyday)
x<-mice(stepsbyday$steps,m=2)
stepsbyday$steps <- as.numeric(stepsbyday$steps)
stepsbyday <- as.data.frame(stepsbyday)
class(stepsbyday)
View(stepsbyday)
mice(stepsbyday)
mice(stepsbyday$steps)
complete(stepsbyday)
mice(df)
install.packages("Amelia")
require(Amelia)
amelia(df)
x<-amelia(df)
x<-amelia(stepsbyday)
df
x
x
x$imputations
x$imp1
x$imputations
x$imputations[1]
x$imputations[2]
x1<-x$imputations[1]
x2<-x$imputations[2]
x3<-x$imputations[3]
x4<-x$imputations[4]
x5<-x$imputations[5]
x5
head(x5)
x5$imp5$date
x5$imp5$date
as.data.frame(x)
as.data.frame(x5)
x5
xx5<-as.data.frame(x5)
View(xx5)
history
history()
x
x$imputations[$imp1]
x$imputations[$imp1,]
x$imputations[,$imp1]
x$imputations$imp1
require(Amelia)
imputed2 <- amelia(stepsbyday)
imputed2$imputations$imp1
imp1 <- imputed2$imputations$imp1
plot(imp1$steps~imp1$date)
points(imputed_data$steps~imputed_data$date, col="red")
imp2 <- imputed2$imputations$imp2
points(imp1$steps~imp1$date, col='red')
imp2 <- imputed2$imputations$imp2
points(imp1$steps~imp1$date, col='blue')
```{r}
plot(imputed$steps~imputed$date)
plot(imputed_data$steps~imputed_data$date)
stepsbyday$weekday<- weekdays(stepsbyday$date))
stepsbyday$weekday<- weekdays(stepsbyday$date)
View(stepsbyday)
?boxplot
boxplot(steps~weekdays, data=stepsbyday)
boxplot(steps~weekday, data=stepsbyday)
df <- read.csv("activity.csv",na.strings = "NA", sep=',')
df$date <- as.Date(df$date)
str(df)
?str
summary(df)
806*288
806*288/2
37.38*288/2
We first make a histgram of the total number of steps taken each day. We aggregate the number of steps by date, and for each date, we sum up the steps. The column names of the resulting dataframe stepsbyday were reassigned.
?aggregate
?hist
?na.action
na.action(na.omit(c(1, NA)))
na.omit(c(1,"NA"))
na.omit(c(1,NA))
df <- read.csv("activity.csv",na.strings = "NA", sep=',')
df$date <- as.Date(df$date)
str(df)
stepsbyday <- aggregate(df$steps, by=list(df$date), FUN=sum)
colnames(stepsbyday)<-c("date","steps")
View(stepsbyday)
meanperinterval <- aggregate(df$steps, by=list(df$interval), FUN=mean)
View(meanperinterval)
View(df)
df
df
View(meanperinterval)
meanperinterval <- aggregate(df$steps, by=list(df$interval), FUN=mean)
aggregate(df$steps, by=list(df$interval), FUN=mean)
aggregate(df$steps, by=list(df$interval), FUN=mean, na.rm=TRUE)
View(meanperinterval)
(meanperinterval$max)
?max
max(meanperinterval)
max(meanperinterval$x)
max(meanperinterval$x)
meanperinterval
meanperinterval <- aggregate(df$steps, by=list(df$interval), FUN=mean, na.rm=TRUE)
max(meanperinterval$x)
meanperinterval[meanperinterval$x=max(meanperinterval$x)
meanperinterval[meanperinterval$x=max(meanperinterval$x)]
meanperinterval[meanperinterval$x=max(meanperinterval$x),]
meanperinterval[meanperinterval$x==max(meanperinterval$x)]
meanperinterval[,meanperinterval$x==max(meanperinterval$x)]
meanperinterval[,meanperinterval$x==max(meanperinterval$x)]
meanperinterval$x==max(meanperinterval$x)
sum(meanperinterval$x==max(meanperinterval$x))
which(meanperinterval$x==max(meanperinterval$x))
View(meanperinterval)
i<-104
meanperinterval[104]
meanperinterval[104,]
meanperinterval[104,]$Group.1
View(df)
is.na(df)
sum(is.na(df))
require(Amelia)
aamelia(df)
amelia(df)
?"amelia"
amelia(df,m-1)
amelia(df,m=1)
x<-amelia(df,m=1)
x
x$imputations
x$imputations$imp1
x$imputations$imp2
class(x$imputations$imp1)
require(Amelia)
df_imputed <- amelia(df, m=1)$imputations$imp1
meanperinterval_i <- aggregate(df_imputed$steps, by=list(df_imputed$interval), FUN=mean)
line(meanperinterval_i$x~meanperinterval_i$Group.1, type='l', col='red')
View(meanperinterval_i)
View(df_imputed)
imputed_df<-df
imputed_df$steps[is.na(imputed_df$steps)]
meanperinterval
meanperinterval <- aggregate(df$steps, by=list(df$interval), FUN=mean, na.rm=TRUE)
colnames(meanperinterval)<-c("interval","steps")
View(meanperinterval)
View(meanperinterval_i)
imputed_df$steps[is.na(imputed_df$steps)]
x=merge(df,meanperinterval)
x
View(x)
imputed_df$steps[is.na(imputed_df$steps)]
View(stepsbyday)
View(meanperinterval)
View(df)
? merge
x<-merge(df, meanperinterval, by.x="interval", by.y="interval")
x
View(x)
x
x$steps.x[is.na(x$steps)]
x$steps.x[is.na(x$steps.x)]
x$steps.x[is.na(x$steps.x)]<-x$steps.y
x$steps.x[is.na(x$steps.x)]<- x$steps.y
function(x) { if is.na(x)}
x<-NA
is.na(x)
x<-merge(df, meanperinterval, by.x="interval", by.y="interval")
x
x$new  <- x$steps.y if is.na(x$steps.x) else x$steps.x
x$new  <- ifelse(is.na(x$step.x), x$step.y, x$steps.x )
x$new  <- ifelse(is.na(x$step.x), x$step.y, x$steps.x )
x
x$new  <- ifelse(is.na(x$step.x), x$step.y, x$steps.x )
?ifelse
is.na(x$step.x)
is.na(x$step.x)
is.na(x$steps.x)
x$new  <- ifelse(is.na(x$steps.x), x$steps.y, x$steps.x )
View(x)
dfi<-merge(df, meanperinterval, by.x="interval", by.y="interval")
dfi$steps_imputed  <- ifelse(is.na(dfi$steps.x), dfi$steps.y, dfi$steps.x )
View(dfi)
```{r}
dfi<-merge(df, meanperinterval, by.x="interval", by.y="interval")
dfi$steps_imputed  <- ifelse(is.na(dfi$steps.x), dfi$steps.y, dfi$steps.x)
stepsbyday_i1 <- aggregate(dfi$steps_imputed, by=list(dfi$date), FUN=sum)
hist(stepsbyday_i1$steps_imputed, xlab="Total steps per day", main="Distribution of total steps per day (Imputed data with interval average)")
summary(stepsbyday_i1$steps_imputed)
View(dfi)
View(stepsbyday_i1)
View(meanperinterval_i)
View(stepsbyday_i1)
View(stepsbyday)
df <- read.csv("activity.csv",na.strings = "NA", sep=',')
df$date <- as.Date(df$date)
str(df)
meanperinterval <- aggregate(df$steps, by=list(df$interval), FUN=mean, na.rm=TRUE)
View(meanperinterval)
dfi<-merge(df, meanperinterval, by.x="interval", by.y="interval")
dfi$steps_imputed  <- ifelse(is.na(dfi$steps.x), dfi$steps.y, dfi$steps.x)
dfi<-merge(df, meanperinterval, by.x="interval", by.y="interval")
dfi$steps_imputed  <- ifelse(is.na(dfi$steps.x), dfi$steps.y, dfi$steps.x)
View(meanperinterval)
colnames(meanperinterval)<-c("interval","steps")
dfi<-merge(df, meanperinterval, by.x="interval", by.y="interval")
dfi$steps_imputed  <- ifelse(is.na(dfi$steps.x), dfi$steps.y, dfi$steps.x)
View(dfi)
stepsbyday_i1 <- aggregate(dfi$steps_imputed, by=list(dfi$date), FUN=sum)
colnames(stepsbyday_i1)<-c("date","steps_imputed")
View(stepsbyday_i1)
(10770-9354)/9354
View(dfi)
mean(dfi$steps_imputed)
mean(df$steps)
mean(df$steps,na.rm = T)
View(stepsbyday_i1)
df <- read.csv("activity.csv",na.strings = "NA", sep=',')
df$date <- as.Date(df$date)
str(df)
df$weekday <- ifelse ( weekdays(df$date), abbreviate=T) %in% c("Sat", "Sun") "Weekends", "Weekdays")
df$weekday <- ifelse ( weekdays(df$date), abbreviate=T) %in% c("Sat", "Sun"), "Weekends", "Weekdays")
df$weekday <- ifelse ( weekdays(df$date, abbreviate=T) %in% c("Sat", "Sun"), "Weekends", "Weekdays")
View(df)
timeseries <- aggregate(df$steps, by=list(df$interval, df$weekday), FUN=mean, rm=T)
View(timeseries)
View(df)
timeseries <- aggregate(df$steps, by=list(df$interval, df$weekday), FUN=mean, na.rm=T)
View(timeseries)
xyplot(steps ~ interval | weekday, data = df,
auto.key = list(corner = c(0, .98)), cex = 1.5)
library(lattice)
xyplot(steps ~ interval | weekday, data = df,
auto.key = list(corner = c(0, .98)), cex = 1.5)
xyplot(steps ~ interval | weekday, data = timeseries,
auto.key = list(corner = c(0, .98)), cex = 1.5)
xyplot(steps ~ interval | weekday, data = timeseries,
auto.key = list(corner = c(0, .98)), cex = 1.5)
colnames(stepsbyday_i)<-c("interval","weekday","steps")
colnames(timeseries)<-c("interval","weekday","steps")
xyplot(steps ~ interval | weekday, data = timeseries,
+        auto.key = list(corner = c(0, .98)), cex = 1.5)
xyplot(steps ~ interval | weekday, data = timeseries, auto.key = list(corner = c(0, .98)), cex = 1.5)
xyplot(steps ~ interval | weekday, data = timeseries, auto.key = list(corner = c(0, .98)), cex = 1.5)
xyplot(steps ~ interval | weekday, data = timeseries
)
xyplot(steps ~ interval | weekday, data = timeseries, type='l')
xyplot(steps ~ interval | weekday, data = timeseries, type='smooth')
xyplot(steps ~ interval | weekday, data = timeseries, type='spline')
trellis.par.set(c(2,1))
xyplot(steps ~ interval | weekday, data = timeseries, type='spline')
trellis.par.set(c(1,2))
xyplot(steps ~ interval | weekday, data = timeseries, type='spline')
xyplot(steps ~ interval | weekday, data = timeseries, type='spline', panel=c(1,1))
library(ggplot2)
ggplot(data=timeseries)
ggplot(data=timeseries, aes(x=interval,y=steps))
ggplot(data=timeseries, aes(x=interval,y=steps))+geom_line(aes(colour=weekday)
)
ggplot(data=timeseries, aes(x=interval,y=steps))+geom_line(aes(colour=weekday))+geom_smooth("spline")
?ggplot
ggplot(data=timeseries, aes(x=interval,y=steps))+geom_line(aes(colour=weekday))+stat_smooth()
ggplot(data=timeseries, aes(x=interval,y=steps))+geom_line(aes(colour=weekday))+stat_smooth(aes(weekday)
)
ggplot(data=timeseries, aes(x=interval,y=steps))+geom_line(aes(colour=weekday))+stat_smooth(aes(weekday))
ggplot(data=timeseries, aes(x=interval,y=steps))+geom_line(aes(colour=weekday))+stat_smooth(method='spline')
ggplot(data=timeseries, aes(x=interval,y=steps))+geom_line(aes(colour=weekday))+stat_smooth(method=spline)
ggplot(data=timeseries, aes(x=interval,y=steps))+geom_line(aes(colour=weekday))+stat_smooth(method=lm)
ggplot(data=timeseries, aes(x=interval,y=steps))+geom_line(aes(colour=weekday))
ggplot(data=timeseries, aes(x=interval,y=steps))+geom_line(aes(colour=weekday))+aes(size=2)
ggplot(data=timeseries, aes(x=interval,y=steps))+geom_line(aes(colour=weekday))+aes(size=1)
ggplot(data=timeseries, aes(x=interval,y=steps))+geom_line(aes(colour=weekday))+aes(size=1)
ggplot(data=timeseries, aes(x=interval,y=steps))+geom_line(aes(colour=weekday))+aes(size=0.1)
ggplot(data=timeseries, aes(x=interval,y=steps))+geom_line(aes(colour=weekday))
ggplot(data=timeseries, aes(x=interval,y=steps))+geom_line(aes(colour=weekday,size=1))
ggplot(data=timeseries, aes(x=interval,y=steps))+geom_line(aes(colour=weekday)
)
ggplot(data=timeseries, aes(x=interval,y=steps))+geom_line(aes(colour=weekday), size=1)
